# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

#orbs:
#  node: circleci/node@5.2.0

prod_filters: &prod_filters
  filters:
    tags:
      only:
        - /^v.*/
    branches:
      ignore: /.*/

jobs:
  build:
    docker:
      - image: cimg/node:18.17.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Build
          command: npm run build
      - save_cache:
          key: app-build-cache-{{ .Branch }}
          paths:
            - ./build

  deploy:
    docker:
      - image: cimg/node:18.17.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - restore_cache:
          key: app-build-cache-{{ .Branch }}
      - run:
          name: Deploy to Netlify
          command: |
            ./node_modules/.bin/netlify deploy --build --site $NETLIFY_SITE_ID --auth $NETLIFY_API_TOKEN --dir=build --json > output.json
      - save_cache:
          key: netlify-json-{{ .Branch }}
          paths:
            - ./output.json

  create_env_file:
    docker:
      - image: cimg/node:18.17.0
    steps:
      - run:
          command: |
            echo -e "\nCreating env file based on CircleCI variables" \
            touch .env \
            echo "NETLIFY_API_TOKEN: '${NETLIFY_API_TOKEN}'," > .env \
            echo "Successfully created env file"

#  comment-pr:
#    docker:
#      - image: cimg/node:18.17.0
#    steps:
#      - restore-cache:
#        key: netlify-json-{{ .Branch }}
#      - run:
#          name: Comment PR deploy preview
#            sudo apt-get install jq
#            NETLIFY_PREVIEW_URL=$(jq -r '.deploy_url' ./output.json)
#            echo "NETLIFY_PREVIEW_URL=$NETLIFY_PREVIEW_URL" >> "$GITHUB_OUTPUT"
  #
  #      - run:
  #          name: Comment Deploy URL
  #          command: |
  #            sudo apt-get install jq
  #
  #            pr_response=$(curl --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open" \
  #            -u $GH_USER:$GH_TOKEN)
  #
  #            if [ $(echo $pr_response | jq length) -eq 0 ]; then
  #              echo "No PR found to update"
  #            else
  #              pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")
  #            fi
  #
  #            curl --location --request POST "$pr_comment_url" \
  #            -u $GH_USER:$GH_TOKEN \
  #            --header 'Content-Type: application/json' \
  #            --data-raw '{
  #             "body": $NETLIFY_PREVIEW_URL
  #            }'

  deploy_prod:
    docker:
      - image: cimg/node:18.17.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - restore_cache:
          key: app-build-cache-{{ .Branch }}
      - run:
          name: Deploy to Netlify
          command: |
            ./node_modules/.bin/netlify deploy --site $NETLIFY_SITE_ID --auth $NETLIFY_API_TOKEN --dir=build --prod

workflows:
  version: 2
  build-deploy:
    jobs:
      - create_env_file
      - build:
          requires:
            - create_env_file
      - deploy:
          requires:
            - build

  build-deploy-prod:
    jobs:
      - build:
          <<: *prod_filters

      - deploy_prod:
          requires:
            - build
          <<: *prod_filters
